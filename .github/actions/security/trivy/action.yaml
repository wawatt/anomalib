# Trivy Scanner Action
#
# This composite action executes comprehensive security scanning using Trivy,
# supporting multiple targets and vulnerability detection methods.
#
# Key Features:
# - Multi-target scanning
# - Vulnerability detection
# - Secret scanning
# - SBOM generation
# - IaC analysis
#
# Process Stages:
# 1. Environment Setup:
#    - Trivy installation
#    - Database updates
#    - Cache configuration
#
# 2. Scan Execution:
#    - Target analysis
#    - Vulnerability detection
#    - Configuration checks
#
# 3. Results Processing:
#    - Report generation
#    - SBOM creation
#    - Finding analysis
#
# Required Inputs:
# - scan_type: Type of scan
# - scan_target: Target to analyze
# - severity: Issue threshold
#
# Outputs:
# - scan_result: Scan exit code
# - report_path: Results location
#
# Example Usage:
# steps:
#   - uses: ./.github/actions/security/trivy
#     with:
#       scan_type: "fs"
#       scan_target: "./src"
#       severity: "HIGH,CRITICAL"
#
# Note: Requires appropriate permissions for scanning

name: "Trivy Security Scanner"
description: "Comprehensive security scanner for vulnerabilities, IaC issues, and secrets"

inputs:
  scan_type:
    description: "Type of scan to perform (fs/config/image/repo/rootfs)"
    required: false
    default: "fs"
  scan-scope:
    description: "Scope of files to scan (all/changed)"
    required: false
    default: "changed"
  scan_target:
    description: "Target to scan (path, image name, or repo URL)"
    required: false
    default: "."
  severity:
    description: "Minimum severity level (UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL)"
    required: false
    default: "MEDIUM,HIGH,CRITICAL"
  ignore_unfixed:
    description: "Ignore unpatched/unfixed vulnerabilities"
    required: false
    default: "false"
  scanners:
    description: "Scanners to enable (vuln,secret,config)"
    required: false
    default: "vuln"
  misconfig_scanners:
    description: "Misconfig scanners to enable (azure-arm,cloudformation,dockerfile,helm,kubernetes,terraform,terraformplan)"
    required: false
    default: "azure-arm,cloudformation,dockerfile,helm,kubernetes,terraform,terraformplan"
  format:
    description: "Output format (table,json,sarif,template)"
    required: false
    default: "sarif"
  timeout:
    description: "Timeout duration (e.g., 5m, 10m)"
    required: false
    default: "10m"
  generate_sbom:
    description: "Generate Software Bill of Materials (SBOM)"
    required: false
    default: "false"
  sbom_format:
    description: "SBOM output format (cyclonedx, spdx, spdx-json)"
    required: false
    default: "spdx-json"

outputs:
  scan_result:
    description: "Exit code of the Trivy scan"
    value: ${{ steps.run-trivy.outputs.exit_code }}
  report_path:
    description: "Path to the generated report file"
    value: ${{ steps.run-trivy.outputs.report_path }}

runs:
  using: composite
  steps:
    - name: Get changed files
      if: inputs.scan-scope == 'changed'
      id: changed-files
      uses: tj-actions/changed-files@ed68ef82c095e0d48ec87eccea555d944a631a4c # v46.0.5

    - name: Cache Trivy vulnerability database
      uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4
      with:
        path: ~/.cache/trivy
        key: trivy-db-${{ runner.os }}-${{ hashFiles('**/trivy-db/**') }}
        restore-keys: |
          trivy-db-${{ runner.os }}-

    - name: Install Trivy
      shell: bash
      run: |
        curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin v0.63.0
        # Download DB in advance with retry mechanism
        for i in {1..3}; do
          echo "Attempt $i to download vulnerability database..."
          trivy --cache-dir ~/.cache/trivy image --download-db-only && break || sleep 10
        done

    - name: Run Trivy scan
      id: run-trivy
      shell: bash
      env:
        INPUTS_SCAN_TYPE: ${{ inputs.scan_type }}
        INPUTS_SCAN_SCOPE: ${{ inputs.scan-scope }}
        INPUTS_SCAN_TARGET: ${{ inputs.scan_target }}
        INPUTS_SEVERITY: ${{ inputs.severity }}
        INPUTS_IGNORE_UNFIXED: ${{ inputs.ignore_unfixed }}
        INPUTS_SCANNERS: ${{ inputs.scanners }}
        INPUTS_MISCONFIG_SCANNERS: ${{ inputs.misconfig_scanners }}
        INPUTS_FORMAT: ${{ inputs.format }}
        INPUTS_TIMEOUT: ${{ inputs.timeout }}
        INPUTS_GENERATE_SBOM: ${{ inputs.generate_sbom }}
        INPUTS_SBOM_FORMAT: ${{ inputs.sbom_format }}

      # zizmor ignore: all_changed_files is tj-actions/changed-files output
      run: | # zizmor: ignore[template-injection]
        # Map provided severity levels to Trivy levels
        case "$INPUTS_SEVERITY" in
          "LOW")
            TRIVY_SEVERITY="LOW,MEDIUM,HIGH,CRITICAL"
            ;;
          "MEDIUM")
            TRIVY_SEVERITY="MEDIUM,HIGH,CRITICAL"
            ;;
          "HIGH")
            TRIVY_SEVERITY="HIGH,CRITICAL"
            ;;
          *)
            TRIVY_SEVERITY="UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL"
            ;;
        esac

        # Create output directory

        mkdir -p security-results/trivy
        REPORT_FILE="security-results/trivy/trivy-results.$INPUTS_FORMAT"

        echo "Running Trivy with scan type: $INPUTS_SCAN_TYPE"
        echo "Output will be saved to: ${REPORT_FILE}"

        # Always scan the entire directory but use different paths based on scope
        if [[ "$INPUTS_SCAN_SCOPE" == "changed" && -n "${{ steps.changed-files.outputs.all_changed_files }}" ]]; then
          echo "Changed files detected, scanning repository"
          SCAN_TARGET="."
        else
          echo "Scanning target: $INPUTS_SCAN_TARGET"
          SCAN_TARGET="$INPUTS_SCAN_TARGET"
        fi

        # Build the base command
        CMD="trivy --cache-dir ~/.cache/trivy $INPUTS_SCAN_TYPE \
        --severity $TRIVY_SEVERITY \
        --format $INPUTS_FORMAT \
        --output ${REPORT_FILE} \
        --timeout $INPUTS_TIMEOUT"

        # Add scanner-specific flags based on scan type
        if [[ "$INPUTS_SCAN_TYPE" == "config" ]]; then
          # For config scans, use all default misconfig scanners or specified ones
          CMD="$CMD --misconfig-scanners $INPUTS_MISCONFIG_SCANNERS"
        elif [[ "$INPUTS_SCAN_TYPE" == "fs" ]]; then
          # For filesystem scans, use --scanners
          CMD="$CMD --scanners $INPUTS_SCANNERS --ignore-unfixed=$INPUTS_IGNORE_UNFIXED"
        fi

        # Add the scan target and execute
        CMD="$CMD ${SCAN_TARGET}"
        echo "Executing command: $CMD"
        eval $CMD || echo "::warning::Trivy scan completed with findings"

        if [ -f "${REPORT_FILE}" ]; then
          echo "report_path=${REPORT_FILE}" >> $GITHUB_OUTPUT
          echo "Scan report generated at ${REPORT_FILE}"
        else
          echo "::error::Report file was not generated"
          exit 1
        fi

        # Generate SBOM if requested
        if [[ "$INPUTS_GENERATE_SBOM" == "true" ]]; then
          echo "Generating SBOM in $INPUTS_SBOM_FORMAT format"
          trivy fs \
            --format "$INPUTS_SBOM_FORMAT" \
            --output "security-results/trivy/trivy-sbom.$INPUTS_SBOM_FORMAT" \
            ${SCAN_TARGET}
        fi

      # Upload results after full scope analysis
    - name: Upload reports
      if: hashFiles('security-results/trivy/*') != '' # if any report is available
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
      with:
        name: trivy-results
        path: security-results/trivy
        retention-days: 7
    - name: Upload sarif
      if: hashFiles('security-results/trivy/trivy-results.sarif') != '' # if SARIF is available, upload it
      uses: github/codeql-action/upload-sarif@51f77329afa6477de8c49fc9c7046c15b9a4e79d # v3.29.5
      with:
        sarif_file: security-results/trivy/trivy-results.sarif
